import os
import cohere
from typing import List, Dict
from dotenv import load_dotenv

load_dotenv()
API_KEY = os.getenv("COHERE_API_KEY")
co = cohere.Client(API_KEY)

def format_paper(question: str, answer: str, sources: List[str]) -> dict:
    """
    Format the research content into a well-structured academic paper.
    
    Args:
        question: The research question
        answer: The main content generated by the LLM
        sources: List of source URLs
    
    Returns:
        A dictionary containing the structured paper
    """
    # Extract key components using a specialized prompt
    structure_prompt = f"""
    You are an academic research paper formatter.
    
    I have a research answer on the topic: "{question}"
    
    The full content is as follows:
    {answer}
    
    Please extract and organize the following components for a proper academic research paper:
    1. A concise title (10-15 words)
    2. An abstract (200-300 words) summarizing the paper
    3. An introduction section that presents the research question and significance
    4. At least 3 main sections with appropriate headings for the body content
    5. A conclusion section summarizing findings and implications
    
    Format your response as a JSON object with these fields:
    title, abstract, introduction, sections (list of section objects with name and content), conclusion
    
    Only respond with the JSON, no explanations or surrounding text.
    """
    
    structure_response = co.generate(
        model="command-r-plus",
        prompt=structure_prompt,
        max_tokens=1500,
        temperature=0.4,
        stop_sequences=["--"]
    )
    
    # Try to extract structured content, but have a fallback
    try:
        # Extract text between the first { and last }
        import json
        import re
        
        response_text = structure_response.generations[0].text.strip()
        json_pattern = r'{.*}'
        match = re.search(json_pattern, response_text, re.DOTALL)
        
        if match:
            json_str = match.group(0)
            structured_content = json.loads(json_str)
        else:
            raise ValueError("JSON pattern not found")
            
        # Format sections nicely
        formatted_sections = ""
        for section in structured_content.get("sections", []):
            section_name = section.get("name", "").strip()
            section_content = section.get("content", "").strip()
            formatted_sections += f"## {section_name}\n\n{section_content}\n\n"
            
        # Create a properly formatted bibliography
        bibliography = "## References\n\n"
        for i, source in enumerate(sources, 1):
            bibliography += f"[{i}] {source}\n\n"
        
        return {
            "title": structured_content.get("title", question.title()),
            "abstract": structured_content.get("abstract", answer[:300] + "..."),
            "introduction": structured_content.get("introduction", ""),
            "body": formatted_sections,
            "conclusion": structured_content.get("conclusion", ""),
            "citations": sources
        }
        
    except Exception as e:
        # Fallback to a simpler structure if JSON parsing fails
        parts = answer.split("\n\n")
        
        # Simple heuristics to divide content into sections
        abstract = parts[0] if parts else answer[:300] + "..."
        introduction = parts[1] if len(parts) > 1 else "Introduction to " + question
        
        # Create at least one section from remaining content
        remaining = "\n\n".join(parts[2:]) if len(parts) > 2 else answer
        
        return {
            "title": question.title(),
            "abstract": abstract,
            "introduction": introduction,
            "body": "## Main Findings\n\n" + remaining,
            "conclusion": "The research presents valuable insights into the topic, though further study is warranted.",
            "citations": sources
        }